Copy List with Random Pointer (Leetcode 138)
字数55 阅读632 评论0 喜欢0
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

用字典建立新旧两个list的节点对应关系解决该问题。

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        if (head == null) {
            return null;
        }

        HashMap<RandomListNode, RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();
        RandomListNode first = head;
        RandomListNode nHead = new RandomListNode(first.label);
        RandomListNode second = nHead;

        while (first != null) {
            if (first.next != null) {
                RandomListNode temp = new RandomListNode(first.next.label);
                second.next = temp;
            }
            map.put(first, second);
            second.random = first.random;
            first = first.next;
            second = second.next;
        }

        second = nHead;
        while (second != null) {
            second.random = map.get(second.random);
            second = second.next;
        }
        return nHead;
    }
}
