vector<unordered_set<int>> make_graph(int numCourses, vector<pair<int, int>>& prerequisites) {
	vector<unordered_set<int>> graph(numCourses);
	for (auto pre : prerequisites)
		graph[pre.second].insert(pre.first);
	return graph;
}
vector<int> compute_indegree(vector<unordered_set<int>>& graph) {
	vector<int> degrees(graph.size(), 0);
	for (auto neighbors : graph)
		for (int neigh : neighbors)
			degrees[neigh]++;
	return degrees;
}




vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
	vector<unordered_set<int>> graph = make_graph(numCourses, prerequisites);
	vector<int> degrees = compute_indegree(graph);
	queue<int> zeros;
	for (int i = 0; i < numCourses; i++)
		if (!degrees[i]) zeros.push(i);
	vector<int> toposort;
	for (int i = 0; i < numCourses; i++) {
		if (zeros.empty()) return{};
		int zero = zeros.front();
		zeros.pop();
		toposort.push_back(zero);
		for (int neigh : graph[zero]) {
			if (!--degrees[neigh])
				zeros.push(neigh);
		}
	}
	return toposort;
}



int main(){
	int numCourses = 4;
	vector<pair<int, int>> prerequisites = { { 1, 0 }, { 2, 0 }, { 3, 1 }, {3, 2} };
	vector<int> res = findOrder(numCourses, prerequisites);
	return 0;
}
