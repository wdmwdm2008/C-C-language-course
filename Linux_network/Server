1 #include <stdio.h>
  2 #include <stdlib.h>
  3 #include <string.h>
  4 #include <errno.h>
  5 
  6 #include <netinet/in.h>
  7 #include <sys/socket.h>
  8 #include <arpa/inet.h>
  9 #include <sys/epoll.h>
 10 #include <unistd.h>
 11 #include <sys/types.h>
 12 
 13 #define IPADDRESS   "127.0.0.1"
 14 #define PORT        8787
 15 #define MAXSIZE     100000
 16 #define LISTENQ     5
 17 #define FDSIZE      1000
 18 #define EPOLLEVENTS 100
 19 
 20 //函数声明
 21 //创建套接字并进行绑定
 22 static int socket_bind(const char* ip,int port);
 23 //IO多路复用epoll
 24 static void do_epoll(int listenfd);
 25 //事件处理函数
 26 static void
 27 handle_events(int epollfd,struct epoll_event *events,int num,int listenfd,char *buf);
 28 //处理接收到的连接
 29 static void handle_accpet(int epollfd,int listenfd);
 30 //读处理
 31 static void do_read(int epollfd,int fd,char *buf);
 32 //写处理
 33 static void do_write(int epollfd,int fd,char *buf);
 34 //添加事件
 35 static void add_event(int epollfd,int fd,int state);
 36 //修改事件
 37 static void modify_event(int epollfd,int fd,int state);
 38 //删除事件
 39 static void delete_event(int epollfd,int fd,int state);
 40 
 41 int main(int argc,char *argv[])
 42 {
 43     int  listenfd;
 44     listenfd = socket_bind(IPADDRESS,PORT);
 45     listen(listenfd,LISTENQ);
 46     do_epoll(listenfd);
 47     return 0;
 48 }
 49 
 50 static int socket_bind(const char* ip,int port)
 51 {
 52     int  listenfd;
 53     struct sockaddr_in servaddr;
 54     listenfd = socket(AF_INET,SOCK_STREAM,0);
 55     if (listenfd == -1)
 56     {
 57         perror("socket error:");
 58         exit(1);
 59     }
 60     bzero(&servaddr,sizeof(servaddr));
 61     servaddr.sin_family = AF_INET;
 62     inet_pton(AF_INET,ip,&servaddr.sin_addr);
 63     servaddr.sin_port = htons(port);
 64     if (bind(listenfd,(struct sockaddr*)&servaddr,sizeof(servaddr)) == -1)
 65     {
 66         perror("bind error: ");
 67         exit(1);
 68     }
 69     return listenfd;
 70 }
 71 
 72 static void do_epoll(int listenfd)
 73 {
 74     int epollfd;
 75     struct epoll_event events[EPOLLEVENTS];
 76     int ret;
 77     char buf[MAXSIZE];
 78     memset(buf,0,MAXSIZE);
 79     //创建一个描述符
 80     epollfd = epoll_create(FDSIZE);
 81     //添加监听描述符事件
 82     add_event(epollfd,listenfd,EPOLLIN);
 83     for ( ; ; )
 84     {
 85         //获取已经准备好的描述符事件
 86         ret = epoll_wait(epollfd,events,EPOLLEVENTS,-1);
 87         handle_events(epollfd,events,ret,listenfd,buf);
 88     }
 89     close(epollfd);
 90 }
 91 
 92 static void
 93 handle_events(int epollfd,struct epoll_event *events,int num,int listenfd,char *buf)
 94 {
 95     int i;
 96     int fd;
 97     //进行选好遍历
 98     for (i = 0;i < num;i++)
 99     {
100         fd = events[i].data.fd;
101         //根据描述符的类型和事件类型进行处理
102         if ((fd == listenfd) &&(events[i].events & EPOLLIN))
103             handle_accpet(epollfd,listenfd);
104         else if (events[i].events & EPOLLIN)
105             do_read(epollfd,fd,buf);
106         else if (events[i].events & EPOLLOUT)
107             do_write(epollfd,fd,buf);
108     }
109 }
110 static void handle_accpet(int epollfd,int listenfd)
111 {
112     int clifd;
113     struct sockaddr_in cliaddr;
114     socklen_t  cliaddrlen;
115     clifd = accept(listenfd,(struct sockaddr*)&cliaddr,&cliaddrlen);
116     if (clifd == -1)
117         perror("accpet error:");
118     else
119     {
120         printf("accept a new client: %s:%d\n",inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);
121         //添加一个客户描述符和事件
122         add_event(epollfd,clifd,EPOLLIN);
123     }
124 }
125 
126 static void do_read(int epollfd,int fd,char *buf)
127 {
128     int nread;
129     nread = read(fd,buf,MAXSIZE);
130     if (nread == -1)
131     {
132         perror("read error:");
133         close(fd);
134         delete_event(epollfd,fd,EPOLLIN);
135     }
136     else if (nread == 0)
137     {
138         fprintf(stderr,"client close.\n");
139         close(fd);
140         delete_event(epollfd,fd,EPOLLIN);
141     }
142     else
143     {
144         printf("read message is : %s",buf);
145         //修改描述符对应的事件，由读改为写
146         modify_event(epollfd,fd,EPOLLOUT);
147     }
148 }
149 
150 static void do_write(int epollfd,int fd,char *buf)
151 {
152     int nwrite;
153     nwrite = write(fd,buf,strlen(buf));
154     if (nwrite == -1)
155     {
156         perror("write error:");
157         close(fd);
158         delete_event(epollfd,fd,EPOLLOUT);
159     }
160     else
161         modify_event(epollfd,fd,EPOLLIN);
162     memset(buf,0,MAXSIZE);
163 }
164 
165 static void add_event(int epollfd,int fd,int state)
166 {
167     struct epoll_event ev;
168     ev.events = state;
169     ev.data.fd = fd;
170     epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&ev);
171 }
172 
173 static void delete_event(int epollfd,int fd,int state)
174 {
175     struct epoll_event ev;
176     ev.events = state;
177     ev.data.fd = fd;
178     epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&ev);
179 }
180 
181 static void modify_event(int epollfd,int fd,int state)
182 {
183     struct epoll_event ev;
184     ev.events = state;
185     ev.data.fd = fd;
186     epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&ev);
187 }
